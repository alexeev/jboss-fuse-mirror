\u001B[1mSYNOPSIS\u001B[0m
    ${project.name}

    ${project.description}

    Maven URL:
        \u001B[33mmvn:${project.groupId}/${project.artifactId}/${project.version}\u001B[0m

\u001B[1mDESCRIPTION\u001B[0m
    This bundle contains the fabric camel component. It provides a way to reuse Fabric's discovery
    mechanism to expose camel endpoints (e.g. http or socket) into the runtime registry using a logical name.
    This avoid that the client which would like to call one of these endpoints has to know the IP/hostname and port
    number.
    Internally, the component uses a LoadBalancer Factory which will send camel exchanges to any endpoints connected
    to the fabric

\u001B[1mENDPOINT-URI\u001B[0m
    \u001B[32mfabric:myName:myComponent\u001B[0m
    where
    \u001B[32myName\u001B[0m : the name of the fabric service to be registered
    \u001B[32myComponent\u001B[0m : one of the camel component - http://camel.apache.org/components.html


\u001B[1mEXAMPLE\u001B[0m

  \u001B[1mCamel Route exposing endpoint into the Fabric registry\u001B[0m

  \u001B[35mfrom("fabric:myName:jetty:http://0.0.0.0:8181").to("bean:foo")\u001B[0m

  Here we just prefix any socket or HTTP based endpoint with fabric::myName where the myName is the
  logical name of the service you wish to use. This prefix is then used to expose your endpoint URI
  into the Runtime Registry.

  \u001B[1mCamel Route consuming messages from Fabric\u001B[0m

  \u001B[35mfrom("seda:foo").to("fabric:myName")\u001B[0m

  In the above route we send to the endpoint fabric:myName which at runtime will use the myName
  entry in the Camel Fabric to discover the currently available physical endpoints in the fabric
  for this name; then load balance across them.
